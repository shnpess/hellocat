version: 2
jobs:
  build:
    docker:
    - image: circleci/ruby:2.6.3-node-browsers
      environment:
        - BUNDLER_VERSION: 2.0.2
        - RAILS_ENV: 'test'
    - image: circleci/mysql:5.6
      environment:
        - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
        - MYSQL_ROOT_HOST: '127.0.0.1'

    working_directory: ~/myapp  

    steps:
    - checkout

    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        - v1-dependencies-

    - run:
        name: install dependencies
        command: |
          gem install bundler -v 2.0.2
          bundle install --jobs=4 --retry=3 --path vendor/bundle

    - save_cache:
        paths:
        - ./vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}

    # Database setup
    - run: mv ./config/database.yml.ci ./config/database.yml

    # Database setup
    - run:
        name: Databasesetup
        command: |
           bundle exec rake db:create
           bundle exec rake db:schema:load

    # run tests!
    - run:
        name: Run rspec
        command: |
          mkdir /tmp/test-results
          TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
            circleci tests split --split-by=timings)"

          bundle exec rspec \
            --format progress \
            --format RspecJunitFormatter \
            --out /tmp/test-results/rspec.xml \
            --format progress \
            $TEST_FILES
    
    # rubocop 
    - run:
        name: Rubocop
        command: bundle exec rubocop

    # collect reports
    - store_test_results:
        path: /tmp/test-results
    - store_artifacts:
        path: /tmp/test-results
        destination: test-results

    - add_ssh_keys:
        fingerprints:
          - "75:b0:54:95:8a:0a:90:c9:fd:49:9e:87:ee:5f:7d:a4"

    - deploy:
        name: Capistrano deploy
        command: |
          if [ "${CIRCLE_BRANCH}" != "master" ]; then
            exit 0
          fi
          bundle exec cap production deploy



# ----------------コンテナ自動デプロイ------------------

# orbs:
#   aws-ecr: circleci/aws-ecr@6.7.0
#   aws-ecs: circleci/aws-ecs@1.1.0
# workflows:
#   # Nginxのデプロイ
#   nginx-deploy:
#     jobs:
#       - aws-ecr/build-and-push-image:
#           context: docker_app
#           account-url: AWS_ECR_ACCOUNT_URL
#           region: AWS_REGION
#           aws-access-key-id: AWS_ACCESS_KEY_ID
#           aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#           create-repo: true
#           dockerfile: ./nginx/Dockerfile
#           repo: nginx
#           tag: "${CIRCLE_SHA1}"
#           filters:
#             branches:
#               only: master
#       - aws-ecs/deploy-service-update:
#           context: docker_app
#           requires:
#             - aws-ecr/build-and-push-image
#           family: 'nginx-rails-app' # ECSのタスク定義名
#           cluster-name: '${ECS_ARN}'  #ECSのクラスターのARN
#           service-name: 'docker-service'  #サービス名
#           container-image-name-updates: "container=nginx,tag=${CIRCLE_SHA1}" #コンテナ名

# # railsデプロイ
#   rails-deploy:
#     jobs:
#       - aws-ecr/build-and-push-image:
#           context: docker_app
#           account-url: AWS_ECR_ACCOUNT_URL
#           region: AWS_REGION
#           aws-access-key-id: AWS_ACCESS_KEY_ID
#           aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#           create-repo: true
#           dockerfile: ./Dockerfile
#           repo: rails-api
#           tag: "${CIRCLE_SHA1}"
#           filters:
#             branches:
#               only: master
#       - aws-ecs/deploy-service-update:
#           context: docker_app
#           requires:
#             - aws-ecr/build-and-push-image
#           family: 'nginx-rails-app' # ECSのタスク定義名
#           cluster-name: '${ECS_ARN}' #ECSのクラスターのARN
#           service-name: 'docker-service' #サービス名
#           container-image-name-updates: "container=rails,tag=${CIRCLE_SHA1}" #コンテナ名